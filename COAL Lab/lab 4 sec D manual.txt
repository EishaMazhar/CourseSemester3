------1------
	array2 word 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
	array3 dword 10h, 20h, 30h, 40h, 50h, 60h, 70h, 80h, 90h
	display byte ‘HELLO WORLD’,0
(a)
	mov esi,0
	mov esi,offset array2 ; esi=000A5000
	call DumpRegs
(b)
	mov esi,0
	mov esi,offset array3 ;esi 00AA5014
	call DumpRegs
(c)
	mov esi,0
	mov esi,offset display ;esi 00BB5038
	call DumpRegs
-------2------
(a)
	mov eax,0
	mov ebx,0
	mov ax,array2+6
	xchg ax,array2+12
	mov array2+6,ax ; eax=00000011=(17)
	mov bl,type array2 ; bl=2 (size of each element)
	mov bh,lengthof array2 ;bh=10 (no of elements)
	call DumpRegs
(b)
	main PROC
	mov eax,0
	mov ebx,0
	mov eax,array3+8
	xchg eax,array3+32
	mov array3+8,eax ; eax=00000090
	mov bh,sizeof array3
	mov bl,type array3
	call DumpRegs
(c)
.data
	array1 byte 50,100,150,200,250
	sum Dword 0

.code
	main PROC

	mov eax,0
	movzx eax,array1
	movzx ebx,array1+1
	add eax,ebx
	movzx ebx,array1+2
	add eax,ebx
	movzx ebx,array1+3
	add eax,ebx
	movzx ebx,array1+4
	add eax,ebx         ;  eax=000002EE
	mov sum,eax
	
	call DumpRegs
	exit
	main ENDP
	END main
--------3-----------
.data
	arrayB BYTE 10, 20, 30
	arrayW WORD 150, 250, 350
	arrayD DWORD 600, 1200, 1800
	S1 DWORD 0
	S2 DWORD 0
	S3 DWORD 0
.code
main PROC
	mov eax,0
	movzx eax,arrayB[0]
	add eax,dword ptr arrayW[0]
	add eax,arrayD[0]
	mov S1,eax
	call DumpRegs
	mov eax,0
	movzx eax,arrayB[1]
	add eax,dword ptr arrayW[1]
	add eax,arrayD[1]
	mov S1,eax
	call DumpRegs
	mov eax,0
	movzx eax,arrayB[2]
	add eax,dword ptr arrayW[2]
	add eax,arrayD[2]
	mov S1,eax
	call DumpRegs

	exit
	main ENDP
	END main
	
--------4----------
.data
	array1 BYTE 10, 20, 30, 40
	array2 BYTE DUP(?)
.code
	main PROC
	mov eax,0
	mov ebx,0
	mov edx,0
	mov ebx,lengthof array2
	dec ebx
	mov al,array1[ebx]   
	mov array2[eax],al   
	movzx edx,array2[eax]  ; array2[3]=00000028 (EDX)
	call DumpRegs
	dec ebx
	inc eax
	mov al,array1[ebx]
	mov array2[eax],al
	movzx edx,array2[eax]  ; array2[2]=0000001E (EDX)
	call DumpRegs
	dec ebx
	inc eax
	mov al,array1[ebx]
	mov array2[eax],al
	movzx edx,array2[eax]  ; array2[1]=00000014 (EDX)
	call DumpRegs
	dec ebx
	inc eax
	mov al,array1[ebx]
	mov array2[eax],al
	movzx edx,array2[eax]  ; array2[0]=0000000A (EDX)
	call DumpRegs

	exit
	main ENDP
	END main
--------5-----------
INCLUDE Irvine32.inc
.data
	u SBYTE -12
	v SBYTE -2
	w SBYTE 4
	x SBYTE -6
	y SBYTE -8
	z SBYTE ?
.code
	main PROC
	mov eax,0
	mov al,x
	add al,y
	add al,w
	add al,u
	sub al,v
	mov z,al
	call DumpRegs

	exit
	main ENDP
	END main
--------6-------
INCLUDE Irvine32.inc
.data
	a1 word 1,2,3,4,5,6,7,8,9,10
	a2 word 10,20,30,40,50,60,70,80,90,100
	a3 word 10 DUP(?)

.code
	main PROC
	mov eax,0
	mov eax,offset a1
	mov ebx,offset a2
	mov cx,[eax]
	add cx,[ebx]
	mov a3,cx
	call DumpRegs
	mov cx,[eax+2]
	add cx,[ebx+2]
	mov a3+2,cx
	call DumpRegs
	mov cx,[eax+4]
	add cx,[ebx+4]
	mov a3+4,cx
	call DumpRegs
	mov cx,[eax+6]
	add cx,[ebx+6]
	mov a3+6,cx
	call DumpRegs
	mov cx,[eax+8]
	add cx,[ebx+8]
	mov a3+8,cx
	call DumpRegs
	mov cx,[eax+10]
	add cx,[ebx+10]
	mov a3+10,cx
	call DumpRegs
	mov cx,[eax+12]
	add cx,[ebx+12]
	mov a3+12,cx
	call DumpRegs
	mov cx,[eax+14]
	add cx,[ebx+14]
	mov a3+14,cx
	call DumpRegs
	mov cx,[eax+16]
	add cx,[ebx+16]
	mov a3+16,cx
	call DumpRegs
	mov cx,[eax+18]
	add cx,[ebx+18]
	mov a3+18,cx
	call DumpRegs

	exit
	main ENDP
	END main

--------7-------

1)Initialize an array
2)Mov the loop count value to ecx
3)mov 1st and 2nd index in regs
4)compare the regs
5)if reg1>reg2 then swap
6)mov sorted array elements in regs



